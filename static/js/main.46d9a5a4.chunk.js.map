{"version":3,"sources":["components/Header.jsx","components/Post.jsx","components/PostList.jsx","views/MainView.jsx","games/OneToFifteen.jsx","games/GameMainView.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","main","post","className","name","job","href","github","size","color","title","description","date","tags","map","tag","idx","key","Post","PostList","postLists","posts","MainView","data","Grid","numbers","correct","setNumbers","tableRows","row","r","elem","c","onClick","RemoveNumber","OneToFifteen","stop","useState","Array","keys","i","sort","a","b","Math","random","reduce","rows","index","push","length","GetRandomNumber","game","setGame","games","GameMainView","useParams","query","URLSearchParams","useLocation","search","get","started","setStarted","console","log","React","cloneElement","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.46d9a5a4.chunk.js","sourcesContent":["import React from 'react';\nimport { FaGithub } from 'react-icons/fa';\n\nimport '../sass/theme.scss';\nimport '../assets/css/style.scss';\n\nconst Header = ({main, post}) => {\n  return (\n    <header className=\"texture-black\">\n      <div className=\"container\">\n        {main && <h1>{main.name}</h1>}\n        {main && <h2>{main.job}</h2>}\n        {main && (<a href={main.github}> <FaGithub size='1.5em' color='white'/> </a>)}\n        \n        {post && <h1>{post.title}</h1>}\n        {post && <h4 className='post-description'>{post.description}</h4>}\n        {post && <div className='post-date'>Published on {post.date}</div>}\n        {post && <ul className='post-tags'>{post.tags.map((tag, idx)=>(<li key={idx}>{tag}</li>))}</ul>}\n      </div>\n    </header>\n  )\n};\n\nexport default Header;\n","import React from 'react';\nimport { FaRegCalendarAlt } from 'react-icons/fa';\n\nimport '../sass/theme.scss';\nimport '../assets/css/style.scss';\n\nconst Post = ({ post }) => {\n  return (\n    <div>\n      <div className='post-meta'>\n        <a className='post-link' href={post['href']}>\n          <h2 className='post-title'>{post['title']}</h2>\n        </a>\n        <div className='post-date'>\n          <i className='icon-calender'> <FaRegCalendarAlt color='#999' /> </i>\n          {post['date']}\n        </div>\n      </div>\n      <div className='post'>\n        <p>\n          {post['description']}\n        </p>\n      </div>\n    </div >\n  );\n}\n\nexport default Post;","import React from 'react';\nimport Post from './Post';\n\nimport '../sass/theme.scss';\nimport '../assets/css/style.scss';\n\nconst PostList = ({ posts }) => {\n  const postLists = posts.map((post, idx) => (<li key={idx}><Post post={post} /></li>));\n  return (\n    <div className='container'>\n      <ul className='posts'>{postLists}</ul>\n    </div>\n  );\n};\n\nexport default PostList;\n","import React from 'react';\nimport Header from '../components/Header';\nimport PostList from '../components/PostList';\nimport data from '../posts/posts.json';\n\nconst MainView = () => {\n  return (\n    <div>\n      <Header main={{ name: \"Soong Kim\", job: \"Developer\", github: \"https://github.com/soong-kim\" }} />\n      <div className=\"container\">\n      </div>\n      <PostList posts={data['posts']}/>\n    </div>\n  );\n};\n\nexport default MainView;\n","import React, { useState } from 'react';\nimport { FaStop } from 'react-icons/fa';\n\nconst GetRandomNumber = () => {\n  const numbers = [...Array(15).keys()].map((i) => i + 1);\n  numbers.sort(function (a, b) { return 0.5 - Math.random() });\n  return {\n    numbers: numbers.reduce(\n      (rows, key, index) => (index % 3 === 0 ? rows.push([key])\n        : rows[rows.length - 1].push(key)) && rows, [])\n  };\n}\n\nconst Grid = ({ numbers, correct, setNumbers }) => {\n  const RemoveNumber = (r, c) => {\n    if (numbers[r][c] === correct) {\n      numbers[r][c] = '';\n      setNumbers(numbers);\n    }\n  }\n\n  const tableRows = numbers.map(\n    (row, r) => <div className='game-table-row'>\n      {row.map((elem, c) => <div>\n        <button className='game-button' onClick={() => RemoveNumber(r, c)}>{elem}</button>\n      </div>)}\n    </div>\n  );\n\n  return (\n    <div className='game-table'>\n      {tableRows}\n    </div>\n  );\n}\n\nconst OneToFifteen = ({ stop }) => {\n  const [game, setGame] = useState({ ...GetRandomNumber(), correct: 1 });\n  return (\n    <div className='game-container'>\n      <Grid\n        numbers={game.numbers}\n        correct={game.correct}\n        setNumbers={(numbers) => setGame({numbers: numbers, correct: game.correct + 1})}\n      />\n      <button className='button' onClick={() => stop()}>\n        <FaStop size='3em' />\n      </button>\n    </div>\n  );\n};\n\nexport default OneToFifteen;\n","import React, { useState } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { FaPlay } from 'react-icons/fa';\n\nimport Header from '../components/Header';\nimport OneToFifteen from './OneToFifteen';\nimport posts from '../posts/posts.json';\n\nconst games = { '1to15': <OneToFifteen /> };\n\nconst GameMainView = () => {\n  let { name } = useParams();\n  let query = new URLSearchParams(useLocation().search);\n  \n  const post = posts['posts'][query.get('post')];\n  const [started, setStarted] = useState(false);\n  console.log(post);\n  return (\n    <div>\n      <Header post={post} />\n      <div className='container post-container game-container'>\n        {\n          started ? React.cloneElement(games[name], { stop: () => setStarted(false) }) : (\n            <div>\n              <button className='button' onClick={() => setStarted(true)}>\n                <FaPlay size=\"3em\"/>\n              </button>\n            </div>\n          )\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default GameMainView;\n","import React from 'react';\nimport {\n  BrowserRouter as Router, Switch, Route,\n} from 'react-router-dom';\n\nimport MainView from './views/MainView';\nimport GameMainView from './games/GameMainView';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route path='/games/:name' component={GameMainView} />\n          <Route path='/'>\n            <MainView />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}